#!/bin/bash

echo "üîç Test de connectivit√© TransFlow"
echo "================================"

# Test du frontend
echo "üì± Test du Frontend (port 3000)..."
if curl --max-time 5 -s http://localhost:3000 > /dev/null; then
    echo "‚úÖ Frontend accessible sur http://localhost:3000"
    FRONTEND_TITLE=$(curl --max-time 5 -s http://localhost:3000 | grep -o "<title>.*</title>" | sed 's/<title>\(.*\)<\/title>/\1/')
    echo "   Titre: $FRONTEND_TITLE"
else
    echo "‚ùå Frontend inaccessible sur le port 3000"
fi

echo ""

# Test du backend
echo "üîß Test du Backend (port 5002)..."
if curl --max-time 5 -s http://localhost:5002/health > /dev/null; then
    echo "‚úÖ Backend accessible sur http://localhost:5002"
    BACKEND_STATUS=$(curl --max-time 5 -s http://localhost:5002/health | jq -r '.status + " - " + .service' 2>/dev/null || curl --max-time 5 -s http://localhost:5002/health | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
    echo "   Statut: $BACKEND_STATUS"
else
    echo "‚ùå Backend inaccessible sur le port 5002"
fi

echo ""

# Test de la base de donn√©es
echo "üóÑÔ∏è  Test de la base de donn√©es..."
if command -v mongo >/dev/null 2>&1; then
    if mongo --eval "db.runCommand('ping')" transflow >/dev/null 2>&1; then
        echo "‚úÖ Base de donn√©es MongoDB accessible"
        DB_COLLECTIONS=$(mongo --quiet --eval "db.getCollectionNames().join(', ')" transflow 2>/dev/null | tr -d '\n')
        echo "   Collections: $DB_COLLECTIONS"
    else
        echo "‚ùå Base de donn√©es MongoDB inaccessible"
    fi
else
    echo "‚ö†Ô∏è  MongoDB CLI non install√©"
fi

echo ""

# Test des processus
echo "üîÑ Test des processus..."
FRONTEND_PID=$(pgrep -f "vite" | head -1)
BACKEND_PID=$(pgrep -f "test-server.js" | head -1)

if [ ! -z "$FRONTEND_PID" ]; then
    echo "‚úÖ Frontend (Vite) en cours d'ex√©cution - PID: $FRONTEND_PID"
else
    echo "‚ùå Frontend (Vite) non trouv√©"
fi

if [ ! -z "$BACKEND_PID" ]; then
    echo "‚úÖ Backend (Node.js) en cours d'ex√©cution - PID: $BACKEND_PID"
else
    echo "‚ùå Backend (Node.js) non trouv√©"
fi

echo ""

# Test des ports
echo "üåê Test des ports..."
if netstat -tlnp 2>/dev/null | grep ":3000" > /dev/null; then
    echo "‚úÖ Port 3000 ouvert (Frontend)"
else
    echo "‚ùå Port 3000 ferm√©"
fi

if netstat -tlnp 2>/dev/null | grep ":5002" > /dev/null; then
    echo "‚úÖ Port 5002 ouvert (Backend)"
else
    echo "‚ùå Port 5002 ferm√©"
fi

echo ""

# R√©sum√©
echo "üìä R√©sum√© de la connectivit√©:"
echo "=============================="

if [ ! -z "$FRONTEND_PID" ] && [ ! -z "$BACKEND_PID" ]; then
    echo "üéâ Tous les services sont op√©rationnels !"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend:  http://localhost:5002"
    echo "   API Health: http://localhost:5002/health"
else
    echo "‚ö†Ô∏è  Certains services ne sont pas op√©rationnels"
    echo "   V√©rifiez les logs et red√©marrez si n√©cessaire"
fi

echo ""
echo "üîß Commandes utiles:"
echo "   Logs backend: tail -f backend/server.log"
echo "   Red√©marrer backend: ./start-backend.sh"
echo "   Red√©marrer frontend: cd frontend && npm run dev"
