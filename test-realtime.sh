#!/bin/bash

echo "üß™ TEST DU TEMPS R√âEL MOT PAR MOT AVEC VOSK"
echo "============================================="

# Test 1: V√©rifier que le backend r√©pond
echo "1Ô∏è‚É£ Test du backend..."
if curl -s http://localhost:5002/health > /dev/null; then
    echo "‚úÖ Backend OK"
else
    echo "‚ùå Backend KO"
    exit 1
fi

# Test 2: V√©rifier l'engine actuel
echo "2Ô∏è‚É£ V√©rification de l'engine actuel..."
CURRENT_ENGINE=$(curl -s http://localhost:5002/api/transcription/engine | grep -o '"engine":"[^"]*"' | cut -d'"' -f4)
echo "   Engine actuel: $CURRENT_ENGINE"

# Test 3: Switch vers Vosk si n√©cessaire
if [ "$CURRENT_ENGINE" != "vosk" ]; then
    echo "3Ô∏è‚É£ Switch vers Vosk..."
    VOSK_RESPONSE=$(curl -s -X POST http://localhost:5002/api/transcription/engine \
      -H "Content-Type: application/json" \
      -d '{"engine":"vosk"}')
    echo "   R√©ponse: $VOSK_RESPONSE"
    
    # V√©rifier que le switch a fonctionn√©
    sleep 2
    NEW_ENGINE=$(curl -s http://localhost:5002/api/transcription/engine | grep -o '"engine":"[^"]*"' | cut -d'"' -f4)
    if [ "$NEW_ENGINE" = "vosk" ]; then
        echo "‚úÖ Switch vers Vosk r√©ussi"
    else
        echo "‚ùå Switch vers Vosk √©chou√©"
        exit 1
    fi
else
    echo "‚úÖ Vosk d√©j√† actif"
fi

# Test 4: V√©rifier que le service Python temps r√©el est pr√™t
echo "4Ô∏è‚É£ V√©rification du service Python temps r√©el..."
if [ -f "transcription-service/src/main_vosk_realtime.py" ]; then
    echo "‚úÖ Service Python temps r√©el pr√™t"
else
    echo "‚ùå Service Python temps r√©el manquant"
    exit 1
fi

# Test 5: V√©rifier que Vosk est accessible
echo "5Ô∏è‚É£ V√©rification de Vosk..."
if docker ps | grep -q "vosk"; then
    echo "‚úÖ Container Vosk actif"
else
    echo "‚ùå Container Vosk inactif"
    exit 1
fi

# Test 6: Test d'envoi d'un message temps r√©el simul√©
echo "6Ô∏è‚É£ Test d'envoi d'un message temps r√©el..."
TEST_PAYLOAD='{
  "callId": "test-realtime-001",
  "tsMs": '$(date +%s%3N)',
  "speaker": "client",
  "lang": "fr",
  "confidence": 0.8,
  "offsetBytes": 1000,
  "status": "partial",
  "text": "Bonjour, comment allez-vous ?",
  "processingTimeMs": 0,
  "engine": "vosk",
  "realtime": true
}'

echo "   Envoi du payload: $TEST_PAYLOAD"

# Publier sur Redis pour simuler un message temps r√©el
if command -v redis-cli >/dev/null 2>&1; then
    redis-cli publish "transcripts.realtime.v2" "$TEST_PAYLOAD"
    echo "‚úÖ Message publi√© sur Redis"
else
    echo "‚ö†Ô∏è Redis CLI non disponible, test simul√©"
fi

echo ""
echo "üéâ TEST TERMIN√â !"
echo ""
echo "üìã PROCHAINES √âTAPES :"
echo "1. D√©marrer le service Python temps r√©el :"
echo "   cd transcription-service && python3 src/main_vosk_realtime.py"
echo ""
echo "2. Tester avec de vrais fichiers audio dans /home/nfs_proxip_monitor"
echo ""
echo "3. V√©rifier l'interface frontend pour voir les messages temps r√©el"
echo "   http://ai.intelios.us:3000/transcripts-live"




